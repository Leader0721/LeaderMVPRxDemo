package com.example.pub.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.pub.bean.AppVersion;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "APP_VERSION".
*/
public class AppVersionDao extends AbstractDao<AppVersion, Void> {

    public static final String TABLENAME = "APP_VERSION";

    /**
     * Properties of entity AppVersion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property VersionNo = new Property(0, int.class, "versionNo", false, "VERSION_NO");
        public final static Property VersionName = new Property(1, String.class, "versionName", false, "VERSION_NAME");
        public final static Property UpdateReason = new Property(2, String.class, "updateReason", false, "UPDATE_REASON");
        public final static Property IsForce = new Property(3, String.class, "isForce", false, "IS_FORCE");
        public final static Property UpdateTime = new Property(4, String.class, "updateTime", false, "UPDATE_TIME");
        public final static Property DownloadUrl = new Property(5, String.class, "downloadUrl", false, "DOWNLOAD_URL");
    }


    public AppVersionDao(DaoConfig config) {
        super(config);
    }
    
    public AppVersionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_VERSION\" (" + //
                "\"VERSION_NO\" INTEGER NOT NULL ," + // 0: versionNo
                "\"VERSION_NAME\" TEXT," + // 1: versionName
                "\"UPDATE_REASON\" TEXT," + // 2: updateReason
                "\"IS_FORCE\" TEXT," + // 3: isForce
                "\"UPDATE_TIME\" TEXT," + // 4: updateTime
                "\"DOWNLOAD_URL\" TEXT);"); // 5: downloadUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_VERSION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppVersion entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getVersionNo());
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(2, versionName);
        }
 
        String updateReason = entity.getUpdateReason();
        if (updateReason != null) {
            stmt.bindString(3, updateReason);
        }
 
        String isForce = entity.getIsForce();
        if (isForce != null) {
            stmt.bindString(4, isForce);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(5, updateTime);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(6, downloadUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppVersion entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getVersionNo());
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(2, versionName);
        }
 
        String updateReason = entity.getUpdateReason();
        if (updateReason != null) {
            stmt.bindString(3, updateReason);
        }
 
        String isForce = entity.getIsForce();
        if (isForce != null) {
            stmt.bindString(4, isForce);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(5, updateTime);
        }
 
        String downloadUrl = entity.getDownloadUrl();
        if (downloadUrl != null) {
            stmt.bindString(6, downloadUrl);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AppVersion readEntity(Cursor cursor, int offset) {
        AppVersion entity = new AppVersion( //
            cursor.getInt(offset + 0), // versionNo
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // versionName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // updateReason
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // isForce
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // updateTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // downloadUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppVersion entity, int offset) {
        entity.setVersionNo(cursor.getInt(offset + 0));
        entity.setVersionName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUpdateReason(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsForce(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDownloadUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AppVersion entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AppVersion entity) {
        return null;
    }

    @Override
    public boolean hasKey(AppVersion entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
