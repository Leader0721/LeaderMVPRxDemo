package com.example.pub.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.example.pub.bean.TeacherBaseInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;


// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TEACHER_BASE_INFO".
*/
public class TeacherBaseInfoDao extends AbstractDao<TeacherBaseInfo, Long> {

    public static final String TABLENAME = "TEACHER_BASE_INFO";

    /**
     * Properties of entity TeacherBaseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property LoginName = new Property(2, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property UserName = new Property(3, String.class, "userName", false, "USER_NAME");
        public final static Property HeadImg = new Property(4, String.class, "headImg", false, "HEAD_IMG");
        public final static Property ProvinceId = new Property(5, String.class, "provinceId", false, "PROVINCE_ID");
        public final static Property CityId = new Property(6, String.class, "cityId", false, "CITY_ID");
        public final static Property CountyId = new Property(7, String.class, "countyId", false, "COUNTY_ID");
        public final static Property ProvinceName = new Property(8, String.class, "provinceName", false, "PROVINCE_NAME");
        public final static Property CityName = new Property(9, String.class, "cityName", false, "CITY_NAME");
        public final static Property CountyName = new Property(10, String.class, "countyName", false, "COUNTY_NAME");
        public final static Property SchoolId = new Property(11, String.class, "schoolId", false, "SCHOOL_ID");
        public final static Property SchoolName = new Property(12, String.class, "schoolName", false, "SCHOOL_NAME");
        public final static Property SubjectId = new Property(13, String.class, "subjectId", false, "SUBJECT_ID");
        public final static Property SubjectName = new Property(14, String.class, "subjectName", false, "SUBJECT_NAME");
        public final static Property MaterialId = new Property(15, String.class, "materialId", false, "MATERIAL_ID");
        public final static Property MaterialName = new Property(16, String.class, "materialName", false, "MATERIAL_NAME");
        public final static Property Mobile = new Property(17, String.class, "mobile", false, "MOBILE");
        public final static Property Email = new Property(18, String.class, "email", false, "EMAIL");
    }


    public TeacherBaseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TeacherBaseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEACHER_BASE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UUID\" TEXT," + // 1: uuid
                "\"LOGIN_NAME\" TEXT," + // 2: loginName
                "\"USER_NAME\" TEXT," + // 3: userName
                "\"HEAD_IMG\" TEXT," + // 4: headImg
                "\"PROVINCE_ID\" TEXT," + // 5: provinceId
                "\"CITY_ID\" TEXT," + // 6: cityId
                "\"COUNTY_ID\" TEXT," + // 7: countyId
                "\"PROVINCE_NAME\" TEXT," + // 8: provinceName
                "\"CITY_NAME\" TEXT," + // 9: cityName
                "\"COUNTY_NAME\" TEXT," + // 10: countyName
                "\"SCHOOL_ID\" TEXT," + // 11: schoolId
                "\"SCHOOL_NAME\" TEXT," + // 12: schoolName
                "\"SUBJECT_ID\" TEXT," + // 13: subjectId
                "\"SUBJECT_NAME\" TEXT," + // 14: subjectName
                "\"MATERIAL_ID\" TEXT," + // 15: materialId
                "\"MATERIAL_NAME\" TEXT," + // 16: materialName
                "\"MOBILE\" TEXT," + // 17: mobile
                "\"EMAIL\" TEXT);"); // 18: email
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEACHER_BASE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TeacherBaseInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(3, loginName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(5, headImg);
        }
 
        String provinceId = entity.getProvinceId();
        if (provinceId != null) {
            stmt.bindString(6, provinceId);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(7, cityId);
        }
 
        String countyId = entity.getCountyId();
        if (countyId != null) {
            stmt.bindString(8, countyId);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(9, provinceName);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(10, cityName);
        }
 
        String countyName = entity.getCountyName();
        if (countyName != null) {
            stmt.bindString(11, countyName);
        }
 
        String schoolId = entity.getSchoolId();
        if (schoolId != null) {
            stmt.bindString(12, schoolId);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(13, schoolName);
        }
 
        String subjectId = entity.getSubjectId();
        if (subjectId != null) {
            stmt.bindString(14, subjectId);
        }
 
        String subjectName = entity.getSubjectName();
        if (subjectName != null) {
            stmt.bindString(15, subjectName);
        }
 
        String materialId = entity.getMaterialId();
        if (materialId != null) {
            stmt.bindString(16, materialId);
        }
 
        String materialName = entity.getMaterialName();
        if (materialName != null) {
            stmt.bindString(17, materialName);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(18, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(19, email);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TeacherBaseInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(3, loginName);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(4, userName);
        }
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(5, headImg);
        }
 
        String provinceId = entity.getProvinceId();
        if (provinceId != null) {
            stmt.bindString(6, provinceId);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(7, cityId);
        }
 
        String countyId = entity.getCountyId();
        if (countyId != null) {
            stmt.bindString(8, countyId);
        }
 
        String provinceName = entity.getProvinceName();
        if (provinceName != null) {
            stmt.bindString(9, provinceName);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(10, cityName);
        }
 
        String countyName = entity.getCountyName();
        if (countyName != null) {
            stmt.bindString(11, countyName);
        }
 
        String schoolId = entity.getSchoolId();
        if (schoolId != null) {
            stmt.bindString(12, schoolId);
        }
 
        String schoolName = entity.getSchoolName();
        if (schoolName != null) {
            stmt.bindString(13, schoolName);
        }
 
        String subjectId = entity.getSubjectId();
        if (subjectId != null) {
            stmt.bindString(14, subjectId);
        }
 
        String subjectName = entity.getSubjectName();
        if (subjectName != null) {
            stmt.bindString(15, subjectName);
        }
 
        String materialId = entity.getMaterialId();
        if (materialId != null) {
            stmt.bindString(16, materialId);
        }
 
        String materialName = entity.getMaterialName();
        if (materialName != null) {
            stmt.bindString(17, materialName);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(18, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(19, email);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TeacherBaseInfo readEntity(Cursor cursor, int offset) {
        TeacherBaseInfo entity = new TeacherBaseInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // loginName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // headImg
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // provinceId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cityId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // countyId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // provinceName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // cityName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // countyName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // schoolId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // schoolName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // subjectId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // subjectName
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // materialId
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // materialName
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // mobile
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18) // email
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TeacherBaseInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLoginName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setHeadImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setProvinceId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCityId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCountyId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProvinceName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCityName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCountyName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSchoolId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSchoolName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSubjectId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSubjectName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setMaterialId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setMaterialName(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setMobile(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setEmail(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TeacherBaseInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TeacherBaseInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TeacherBaseInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
